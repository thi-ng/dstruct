#+TITLE: thi.ng/dstruct
#+SETUPFILE: src/setup.org
#+AUTHOR: Karsten Schmidt
#+EMAIL: k@thi.ng

* Contents                                                         :toc_3_gh:
 - [[#about-the-project][About the project]]
     - [[#description][Description]]
     - [[#leiningen-coordinates][Leiningen coordinates]]
         - [[#latest-stable][Latest stable]]
 - [[#namespaces][Namespaces]]
 - [[#tests][Tests]]
 - [[#project-definition][Project definition]]
     - [[#injected-properties][Injected properties]]
     - [[#dependencies][Dependencies]]
         - [[#runtime][Runtime]]
         - [[#development][Development]]
     - [[#building-this-project][Building this project]]
         - [[#testing][Testing]]
         - [[#working-with-the-repl][Working with the REPL]]
     - [[#leiningen-project-file][Leiningen project file]]
     - [[#clojurescript-html-harness][ClojureScript HTML harness]]
     - [[#accessing-library-version-during-runtime][Accessing library version during runtime]]
         - [[#version-namespace][Version namespace]]
     - [[#release-history][Release history]]
     - [[#contributors][Contributors]]
     - [[#license][License]]

* About the project
** Description

This library provides the following data structures for
Clojure/Clojurescript:

- Bi-directional index / map
- Heap
- Interval tree
- I/O stream abstractions
- Unionfind (disjoint sets, connected components, undirected graph)

Furthermore, a number of general purpose helper functions for
indexing, sequencing etc. is included.

This library is the result of a thi.ng projectwide
restructuring / dissolving of the [[http://thi.ng/common][thi.ng/common]] library.

*Note:* This library relies on the new conditional reader syntax of
recent Clojure & Clojurescript versions and therefore is *not
compatible with Clojure versions < 1.7.0*...

** Leiningen coordinates
*** Latest stable
#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/dstruct "0.1.5"]
#+END_SRC

* Namespaces

- [[./src/core.org][thi.ng.dstruct.core]]
- [[./src/bidirindex.org][thi.ng.dstruct.bidirindex]]
- [[./src/heap.org][thi.ng.dstruct.heap]]
- [[./src/intervaltree.org][thi.ng.dstruct.intervaltree]]
- [[./src/streams.org][thi.ng.dstruct.streams]]
- [[./src/unionfind.org][thi.ng.dstruct.unionfind]]

* Tests

- TBD

* Project definition
** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :noweb-ref version
0.2.2
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb-ref project-url
http://thi.ng/dstruct
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/dstruct-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.11.1"]
#+END_SRC
**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "1.11.4"]
#+END_SRC
**** [[https://github.com/thi-ng/math][thi.ng/math]]
#+BEGIN_SRC clojure :noweb-ref dep-math
[thi.ng/math "0.3.1"]
#+END_SRC
**** [[https://github.com/thi-ng/xerror][thi.ng/xerror]]
#+BEGIN_SRC clojure :noweb-ref dep-xerror
[thi.ng/xerror "0.1.0"]
#+END_SRC

*** Development
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.6"]
#+END_SRC
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.3.3"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.1.8"]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code. Assuming both tools
are installed, the easiest way to generate a working project is via
command line (make sure =emacs= is on your path or else edit its path
in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi.ng/dstruct.git
  cd dstruct
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Editing code blocks or files in Org-mode, then re-loading & testing
changes is quite trivial. Simply launch a REPL (via =lein= or Emacs)
as usual. Everytime you've made changes to an =.org= file, re-tangle
it from Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace
in the REPL via =(require 'thi.ng.dstruct... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/dstruct "<<version>>"
    :description  "Data structures & utilities for CLJ/CLJS"
    :url          "<<project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "git@github.com:thi-ng/dstruct.git"}

    :min-lein-vesion "2.4.0"

    :dependencies [<<dep-clj>>
                   <<dep-cljs>>
                   <<dep-math>>
                   <<dep-xerror>>]

    :source-paths ["src"]
    :test-paths   ["test"]

    :profiles     {:dev {:dependencies [<<dep-criterium>>]
                         :plugins [<<dep-cljsbuild>>
                                   <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}

    :cljsbuild    {:builds [{:id "simple"
                             :source-paths ["src" "test"]
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :parallel-build true
                                        :static-fns true
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "https://thi.ng/"]
                                [:timezone "1"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.dstruct.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.dstruct.version])

  (prn version)
  ;; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle babel/src/thi/ng/dstruct/version.cljc :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.dstruct.version)

  (def version "<<version>>")
#+END_SRC

** Release history

| *Version* | *Released* | *Description*                                                 |
|-----------+------------+---------------------------------------------------------------|
|     0.2.2 | 2022-04-23 | update deps                                                   |
|     0.2.1 | 2016-06-13 | bugfix CLJS InputStreamWrapper                                |
|     0.2.0 | 2016-04-05 | refactor IBuffer / IIntoBuffer protocol, minor other bugfixes |
|     0.1.5 | 2016-03-19 | update deps, minor fix streams ns                             |
|     0.1.4 | 2016-03-19 | fix tangling of tree walk fns                                 |
|     0.1.3 | 2016-03-19 | add BidirIndex, minor refactor, update deps                   |
|     0.1.2 | 2015-11-05 | add clj/cljs i/o stream abstractions                          |
|     0.1.1 | 2015-09-07 | bugfix DisjointSet, updated dependencies                      |
|     0.1.0 | 2015-05-25 | initial test release                                          |

** Contributors

| *Name*          | *Role*                          | *Website*                  |
|-----------------+---------------------------------+----------------------------|
| [[k@thi.ng][Karsten Schmidt]] | initiator & principal developer | https://thi.ng |

I've got a fairly detailed roadmap and task list to implement over the
coming months, but am always happy to receive feedback & suggestions
and have issues filed. Once the core engine is more refined I'll be
gladly welcoming other contributions. Thanks for understanding!

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
